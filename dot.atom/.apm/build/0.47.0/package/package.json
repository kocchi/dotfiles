{"name":"build","main":"./lib/build","version":"0.47.0","description":"Build your current project, directly from Atom","repository":{"type":"git","url":"git+https://github.com/noseglid/atom-build.git"},"license":"MIT","engines":{"atom":">=0.50.0"},"dependencies":{"ansi_up":"^1.3.0","atom-space-pen-views":"^2.0.3","fs-extra":"^0.23.0","getmac":"^1.0.7","lodash":"^3.8.0","node-uuid":"^1.4.3","temp":"^0.8.1","tree-kill":"^0.1.1","xregexp":"^2.0.0"},"devDependencies":{"jshint":"^2.5.11","jscs":"^1.9.0"},"consumedServices":{"builder":{"versions":{"^1.0.0":"consumeBuilder"}}},"scripts":{"test":"jscs lib/*.js spec/*.js && ./node_modules/.bin/jshint lib/*.js spec/*.js"},"keywords":["build","compile","gulp","make","productivity"],"readme":"# Atom Build package\n[![Build Travis](https://travis-ci.org/noseglid/atom-build.svg?branch=master)](https://travis-ci.org/noseglid/atom-build)\n[![Gitter chat](https://badges.gitter.im/noseglid/atom-build.svg)](https://gitter.im/noseglid/atom-build)\n\nAutomatically build your project inside your new favorite editor, Atom.\n\n  * `cmd-alt-b` / `ctrl-alt-b` builds your project.\n  * `cmd-alt-g` / `ctrl-alt-g` cycles through causes of build error. See [Error Matching](#error-match).\n  * `cmd-alt-h` / `ctrl-alt-h` goes to the first build error. See [Error Matching](#error-match).\n  * `cmd-alt-v` / `ctrl-alt-v` Toggles the build panel.\n  * `cmd-alt-t` / `ctrl-alt-t` Displays the available build targets.\n  * `escape` terminates build / closes the build window.\n\n![work work](https://noseglid.github.io/atom-build.gif)\n\nSupported build tools:\n\n  1. Custom by [specifying your own build command](#custom-build-command)\n    * Supports multiple targets.\n    * Supports error matching.\n  1. [NodeJS](http://nodejs.org) (runs `npm install`) - if `package.json` exists where `engines['node']` is set\n  1. [Atom](http://atom.io) (runs `apm install`) - if `package.json` exists where `engines['atom']` is set\n  1. [Grunt](http://gruntjs.com/) - if `Gruntfile.js` exists\n    * Supports multiple targets.\n  1. [Gulp](http://gulpjs.com/) - if `gulpfile.js` exists\n    * Supports multiple targets.\n  1. [GNU Make](https://www.gnu.org/software/make/) - if `Makefile` exists\n  1. [Elixir](http://elixir-lang.org/) - if `mix.exs` exists\n  1. [Cargo](http://doc.crates.io) - if `Cargo.toml` exists\n    * Supports error matching.\n\nIf multiple viable build options are found, `atom-build` will\nprioritise according to the list above. For instance, if `package.json` and\n`Gruntfile.js` are both available in the root folder, `npm install` will be\nexecuted by `atom-build`.\n\nIf you need to run `grunt`, `gulp` or other tool to build your project, then you can utilize the [postinstall-script](https://www.npmjs.org/doc/misc/npm-scripts.html) of package.json. This will also help you if grunt is run as a node module since it\nwill be downloaded (via `npm install`) prior.\n\n<a name=\"custom-build-command\"></a>\n## Specifying a custom build command\n\nIf the built-in defaults are not enough to suit your needs, you can specify\nexactly what to execute. Create a file named `.atom-build.json` in your project root:\n\n    {\n      \"cmd\": \"<command to execute>\",\n      \"name\": \"<name of target>\",\n      \"args\": [ \"<argument1>\", \"<argument2>\", ... ],\n      \"sh\": true,\n      \"cwd\": \"<current working directory for `cmd`>\",\n      \"env\": {\n        \"VARIABLE1\": \"VALUE1\",\n        \"VARIABLE2\": \"VALUE2\",\n        ...\n      },\n      \"errorMatch\": [\n        \"^regexp1$\",\n        \"^regexp2$\"\n      ],\n      \"keymap\": \"<keymap string>\",\n      \"targets\": {\n        \"<name of target>\": {\n          \"cmd\": \"<command to execute>\",\n          ... (all previous options are viable here except `targets`)\n        }\n      }\n    }\n\nNote that if `sh` is false `cmd` must only be the executable - no arguments here. If the\nexecutable is not in your path, either fully qualify it or specify the path\nin you environment (e.g. by setting the `PATH` var appropriately on UNIX-like\nsystems).\n\n<a name=\"custom-build-config\"></a>\n### Configuration options\n\nOption       | Required       | Description\n-------------|----------------|-----------------------\n`cmd`        | **[required]** | The executable command\n`name`       | *[optional]*   | The name of the targets. Viewed in the targets list (toggled by `build:select-active-target`).\n`args`       | *[optional]*   | An array of arguments for the command\n`sh`         | *[optional]*   | If `true`, the combined command and arguments will be passed to `/bin/sh`. Default `true`.\n`cwd`        | *[optional]*   | The working directory for the command. E.g. what `.` resolves to.\n`env`        | *[optional]*   | An object of environment variables and their values to set\n`errorMatch` | *[optional]*   | A (list of) regular expressions to match output to a file, row and col. See [Error matching](#error-match) for details.\n`keymap`     | *[optional]*   | A keymap string as defined by [`Atom`](https://atom.io/docs/latest/behind-atom-keymaps-in-depth). Pressing this key combination will trigger the target. Examples: `ctrl-alt-k` or `cmd-U`.\n`targets`    | *[optional]*   | Additional targets which can be used to build variations of your project.\n\n### Replacements\n\nThe following parameters will be replaced in `cmd`, any entry in `args`, `cwd` and\nvalues of `env`. They should all be enclosed in curly brackets `{}`\n\n  * `{FILE_ACTIVE}` - Full path to the currently active file in Atom. E.g. `/home/noseglid/github/atom-build/lib/build.js`\n  * `{FILE_ACTIVE_PATH}` - Full path to the folder where the currently active file is. E.g. `/home/noseglid/github/atom-build/lib`\n  * `{FILE_ACTIVE_NAME}` - Full name and extension of active file. E.g., `build.js`\n  * `{FILE_ACTIVE_NAME_BASE}` - Name of active file WITHOUT extension. E.g., `build`\n  * `{PROJECT_PATH}` - Full path to the root of the project. This is normally the path Atom has as root. E.g `/home/noseglid/github/atom-build`\n  * `{REPO_BRANCH_SHORT}` - Short name of the current active branch (if project is backed by git). E.g `master` or `v0.9.1`.\n\n<a name=\"error-match\"></a>\n## Error matching\n\nError matching let's you specify a single regular expression or a list of\nregular expressions, which capture the output of your build command and open the\ncorrect file, row and column of the error. For instance:\n\n```bash\n../foo/bar/a.c:4:26: error: expected ';' after expression\n  printf(\"hello world\\n\")\n                         ^\n                         ;\n1 error generated.\n```\n\nWould be matched with the regular expression: `\\n(?<file>[\\\\/0-9a-zA-Z\\\\._]+):(?<line>\\\\d+):(?<col>\\\\d+)`.\nAfter the build has failed, pressing `cmd-alt-g` (OS X) or `ctrl-alt-g` (Linux/Windows), `a.c` would be\nopened and the cursor would be placed at row 4, column 26.\n\nNote the syntax for match groups. This is from the [XRegExp](http://xregexp.com/) package\nand has the syntax for named groups: `(?<name> RE )` where `name` would be the name of the group\nmatched by the regular expression `RE`.\n\nThe following named groups can be matched from the output:\n  * `file` - **[required]** the file to open. May be relative `cwd` or absolute. `(?<file> RE)`.\n  * `line` - *[optional]* the line the error resides on. `(?<line> RE)`.\n  * `col` - *[optional]* the column the error resides on. `(?<col> RE)`.\n\nSince the regular expressions are written in a JSON file, backslashes must be escaped.\n\nThe `file` should be relative the `cwd` specified. If no `cwd` has been specified, then\nthe `file` should be relative the project root (e.g. the top most directory shown in the\nAtom Editor).\n\nIf your build outputs multiple errors, all will be matched. Press `cmd-alt-g` (OS X) or `ctrl-alt-g` (Linux/Windows)\nto cycle through the errors (in the order they appear, first on stderr then on stdout).\n\nOften, the first error is the most interesting since other errors tend to be secondary faults caused by that first one.\nTo jump to the first error you can use `cmd-alt-h` (OS X) or `ctrl-alt-h` (Linux/Windows) at any point to go to the first error.\n\n## Service API (for package developers)\n\nAnother package may provide build information to the `build`-package by implementing its service API.\nThe package should integrate via the service API. This is typically done in `package.json`:\n\n```json\n{\n  <other stuff>\n  \"providedServices\": {\n    \"builder\": {\n      \"description\": \"Description of the build configurations this package gives\",\n      \"versions\": {\n        \"1.0.0\": \"providingFunction\"\n      }\n    }\n  }\n},\n```\n\nThe `build`-package will then call `providingFunction` when activated and expects an\nobject in return:\n```javascript\n{\n  niceName: 'string',\n  isEligable: function (path) {},\n  settings: function (path) {}\n}\n```\n\nThe `niceName` is esthetic only and should be a `string` which is a human readable\ndescription of the build configuration is provided.\n\n`isEligable` should be a function which must return synchronously. It will get one\nargument, `path`, which is the root folder of the currently active project in Atom.\nIt should return `true` or `false` indicating if it can build that folder into something\nsensible. Typically look for the existence of a build file such as `gulpfile.js` or `Makefile`.\n\n`settings` must return a promise. It is called when it is time to build the project.\nIt can provide anything which is allowed by the [custom build configuration](#custom-build-config).\nThis includes the command, `cmd`, to execute, any arguments, `args`, and so on.\n\n## Analytics\n\nThe `atom-build` package uses google analytics to keep track of which features are in use\nand at what frequency. This gives the maintainers a sense of what parts of the\npackage is most important and what parts can be removed.\n\nThe data is fully anonymous and can not be tracked back to you in any way.\nThis is what is collected\n\n  * Version of package used.\n  * Build triggered, succeeded or failed.\n  * Which build tool was used.\n  * Visibility of UI components.\n\nIf you really do not want to share this information, you can opt out by disabling\nthe [metrics package](https://atom.io/packages/metrics). This will disable all analytics\ncollection, including the one from `atom-build`.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/noseglid/atom-build/issues"},"homepage":"https://github.com/noseglid/atom-build#readme","_id":"build@0.47.0","_shasum":"58e47b575cb9585f2ff1ad6dec40e3a683b64fc8","_resolved":"file:../d-115916-24835-1spo6dl/package.tgz","_from":"../d-115916-24835-1spo6dl/package.tgz"}