# zsh設定 (2025年版)

# XDG Base Directory Specification
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_CACHE_HOME="$HOME/.cache"

# 基本環境変数
export EDITOR="nvim"
export VISUAL="nvim"
export PAGER="less"
export TERM="${TERM:-xterm-256color}"  # tmux内では自動的にtmux-256colorになる
export LANG="ja_JP.UTF-8"

# パスの設定（優先順位順）
path=(
    "$HOME/.local/bin"
    "$HOME/.cargo/bin"      # Rust
    "$HOME/.asdf/shims"     # asdf
    "{{ .homebrew_prefix }}/bin" # Homebrew（アーキテクチャ別）
    "/usr/bin"
    "/bin"
    "/usr/sbin"
    "/sbin"
    $path
)

# 一意なパスのみを保持
typeset -U path PATH

# Homebrewの設定
if [[ -d "{{ .homebrew_prefix }}" ]]; then
    eval "$({{ .homebrew_prefix }}/bin/brew shellenv)"
fi

# asdf（言語バージョン管理）
if [[ -f "$HOME/.asdf/asdf.sh" ]]; then
    source "$HOME/.asdf/asdf.sh"
    source "$HOME/.asdf/completions/asdf.bash"
fi

# zsh-autosuggestions（Homebrewでインストール）
if [[ -f "{{ .homebrew_prefix }}/share/zsh-autosuggestions/zsh-autosuggestions.zsh" ]]; then
    source "{{ .homebrew_prefix }}/share/zsh-autosuggestions/zsh-autosuggestions.zsh"
fi

# zsh-syntax-highlighting（Homebrewでインストール）
if [[ -f "{{ .homebrew_prefix }}/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" ]]; then
    source "{{ .homebrew_prefix }}/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
fi

# fzf（pecoの代替）
if command -v fzf >/dev/null 2>&1; then
    # fzfの設定
    export FZF_DEFAULT_OPTS="--height 40% --layout=reverse --border --margin=1 --padding=1"
    
    # ripgrepがある場合はそれを使用
    if command -v rg >/dev/null 2>&1; then
        export FZF_DEFAULT_COMMAND='rg --files --hidden --follow --glob "!.git/*"'
        export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
    fi
    
    # fzfのキーバインド
    [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
    
    # Homebrewでインストールした場合
    if [[ -f "{{ .homebrew_prefix }}/opt/fzf/shell/key-bindings.zsh" ]]; then
        source "{{ .homebrew_prefix }}/opt/fzf/shell/key-bindings.zsh"
        source "{{ .homebrew_prefix }}/opt/fzf/shell/completion.zsh"
    fi
fi

# Starshipプロンプト
if command -v starship >/dev/null 2>&1; then
    eval "$(starship init zsh)"
else
    # Starshipが無い場合のシンプルなプロンプト
    autoload -U colors && colors
    PROMPT="%{$fg[green]%}%n@%m%{$reset_color%} %{$fg[blue]%}%~%{$reset_color%} %# "
fi

# zshの設定
setopt AUTO_CD              # ディレクトリ名だけでcd
setopt AUTO_PUSHD           # cdでpushdする
setopt PUSHD_IGNORE_DUPS    # 重複するディレクトリはpushdしない
setopt EXTENDED_GLOB        # 拡張globを有効
setopt HIST_IGNORE_ALL_DUPS # 重複するコマンドは履歴に保存しない
setopt HIST_IGNORE_SPACE    # スペースで始まるコマンドは履歴に保存しない
setopt HIST_REDUCE_BLANKS   # 履歴の余分な空白を削除
setopt SHARE_HISTORY        # 履歴を共有
setopt CORRECT              # コマンドの自動修正

# 履歴設定
HISTFILE="$HOME/.zsh_history"
HISTSIZE=100000
SAVEHIST=100000

# 補完設定
autoload -U compinit
compinit -u

# 補完候補をメニュー選択可能に
zstyle ':completion:*' menu select

# 大文字小文字を区別しない補完
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# エイリアス（新しいCLIツール使用）
if command -v exa >/dev/null 2>&1; then
    alias ls='exa'
    alias ll='exa -l'
    alias la='exa -la'
    alias tree='exa --tree'
elif command -v eza >/dev/null 2>&1; then
    alias ls='eza'
    alias ll='eza -l'
    alias la='eza -la'
    alias tree='eza --tree'
fi

if command -v bat >/dev/null 2>&1; then
    alias cat='bat'
fi

if command -v fd >/dev/null 2>&1; then
    alias find='fd'
fi

if command -v rg >/dev/null 2>&1; then
    alias grep='rg'
fi

if command -v procs >/dev/null 2>&1; then
    alias ps='procs'
fi

if command -v dust >/dev/null 2>&1; then
    alias du='dust'
fi

if command -v bottom >/dev/null 2>&1; then
    alias top='btm'
fi

# Git関連のエイリアス
alias g='git'
alias ga='git add'
alias gc='git commit'
alias gco='git checkout'
alias gd='git diff'
alias gl='git log --oneline --graph'
alias gp='git push'
alias gs='git status'

# 一般的なエイリアス
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias vim='nvim'
alias vi='nvim'
alias zshconfig='nvim ~/.zshrc'

# Homebrew自動同期エイリアス
if [[ -x "$HOME/.local/share/chezmoi/brew-auto-sync.sh" ]]; then
    alias brewi='$HOME/.local/share/chezmoi/brew-auto-sync.sh install'    # brew install + 自動同期
    alias brewu='$HOME/.local/share/chezmoi/brew-auto-sync.sh uninstall'  # brew uninstall + 自動同期
    alias brewup='$HOME/.local/share/chezmoi/brew-auto-sync.sh upgrade'   # brew upgrade + 自動同期
    alias brewsync='$HOME/.local/share/chezmoi/brew-auto-sync.sh sync'    # Brewfile手動同期
    alias brewbundle='$HOME/.local/share/chezmoi/brew-auto-sync.sh bundle' # Brewfileから復元
fi

# カスタム関数

# ghqとfzfを使ったリポジトリ移動
if command -v ghq >/dev/null 2>&1 && command -v fzf >/dev/null 2>&1; then
    function ghq-fzf() {
        local selected_dir=$(ghq list -p | fzf --query "$LBUFFER")
        if [ -n "$selected_dir" ]; then
            BUFFER="cd ${selected_dir}"
            zle accept-line
        fi
        zle clear-screen
    }
    zle -N ghq-fzf
    bindkey '^]' ghq-fzf
fi

# プロセス終了用の関数
function fkill() {
    local pid
    if [ "$UID" != "0" ]; then
        pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
    else
        pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
    fi

    if [ "x$pid" != "x" ]; then
        echo $pid | xargs kill -${1:-9}
    fi
}

# gitブランチ削除用の関数（元の設定を改良）
function git-prune-branches() {
    git fetch --prune origin
    git branch --merged origin/main | grep -vE ' main$|^\*' | xargs -r git branch -d
    git branch --merged origin/master | grep -vE ' master$|^\*' | xargs -r git branch -d
}

function git-prune-branches-dry-run() {
    echo "=== Dry run: branches to be deleted ==="
    git fetch --dry-run --prune origin
    echo "Merged with main:"
    git branch --merged origin/main | grep -vE ' main$|^\*'
    echo "Merged with master:"
    git branch --merged origin/master | grep -vE ' master$|^\*'
}

# tmux自動起動（セッション管理改良）
if command -v tmux >/dev/null 2>&1 && [ -z "$TMUX" ] && [ "$TERM_PROGRAM" != "vscode" ]; then
    # tmuxのセッション一覧を取得
    sessions=$(tmux list-sessions 2>/dev/null)
    
    if [ $? -eq 0 ]; then
        # 既存のセッションがある場合は選択
        if command -v fzf >/dev/null 2>&1; then
            session=$(echo "$sessions" | fzf --select-1 --exit-0 | cut -d: -f1)
            if [ -n "$session" ]; then
                tmux attach-session -t "$session"
            else
                tmux new-session
            fi
        else
            tmux attach-session
        fi
    else
        # セッションが無い場合は新規作成
        tmux new-session
    fi
fi

# iTerm2 Shell Integration（存在する場合のみ）
[ -f ~/.iterm2_shell_integration.zsh ] && source ~/.iterm2_shell_integration.zsh

# Google Cloud SDK（存在する場合のみ）
[ -f ~/google-cloud-sdk/path.zsh.inc ] && source ~/google-cloud-sdk/path.zsh.inc
[ -f ~/google-cloud-sdk/completion.zsh.inc ] && source ~/google-cloud-sdk/completion.zsh.inc

# ローカル設定ファイル（存在する場合のみ）
[ -f ~/.zshrc.local ] && source ~/.zshrc.local