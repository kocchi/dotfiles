# XDG Base Directory Specification
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_CACHE_HOME="$HOME/.cache"

# 基本環境変数
export EDITOR="nvim"
export VISUAL="nvim"
export PAGER="less"
export TERM="${TERM:-xterm-256color}"  # tmux内では自動的にtmux-256colorになる
export LANG="ja_JP.UTF-8"

# パスの設定（優先順位順）
path=(
    "$HOME/.local/bin"
    "$HOME/.cargo/bin"      # Rust
    "$HOME/.asdf/shims"     # asdf
    "{{ .homebrew_prefix }}/bin" # Homebrew（アーキテクチャ別）
    "/usr/bin"
    "/bin"
    "/usr/sbin"
    "/sbin"
    $path
)

# 一意なパスのみを保持
typeset -U path PATH

# Homebrewの設定
if [[ -d "{{ .homebrew_prefix }}" ]]; then
    eval "$({{ .homebrew_prefix }}/bin/brew shellenv)"
fi

# asdf（言語バージョン管理）
if [[ -f "$HOME/.asdf/asdf.sh" ]]; then
    source "$HOME/.asdf/asdf.sh"
    source "$HOME/.asdf/completions/asdf.bash"
fi

# zsh-autosuggestions（Homebrewでインストール）
if [[ -f "{{ .homebrew_prefix }}/share/zsh-autosuggestions/zsh-autosuggestions.zsh" ]]; then
    source "{{ .homebrew_prefix }}/share/zsh-autosuggestions/zsh-autosuggestions.zsh"
    
    # 自動補完設定
    ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#666666,bold"
    ZSH_AUTOSUGGEST_STRATEGY=(history completion)
    ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
    ZSH_AUTOSUGGEST_USE_ASYNC=1
    ZSH_AUTOSUGGEST_MANUAL_REBIND=1
    
    # キーバインド
    bindkey '^ ' autosuggest-accept      # Ctrl+Space で補完を受け入れ
    bindkey '^[[C' forward-char          # 右矢印で1文字受け入れ
    bindkey '^F' autosuggest-accept      # Ctrl+F で全体受け入れ
fi

# zsh-syntax-highlighting（Homebrewでインストール）
if [[ -f "{{ .homebrew_prefix }}/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" ]]; then
    # シンタックスハイライト設定
    ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern cursor)
    
    # 色設定
    typeset -A ZSH_HIGHLIGHT_STYLES
    ZSH_HIGHLIGHT_STYLES[default]=none
    ZSH_HIGHLIGHT_STYLES[unknown-token]=fg=red,bold
    ZSH_HIGHLIGHT_STYLES[reserved-word]=fg=yellow,bold
    ZSH_HIGHLIGHT_STYLES[alias]=fg=green,bold
    ZSH_HIGHLIGHT_STYLES[suffix-alias]=fg=green,bold
    ZSH_HIGHLIGHT_STYLES[builtin]=fg=green,bold
    ZSH_HIGHLIGHT_STYLES[function]=fg=green,bold
    ZSH_HIGHLIGHT_STYLES[command]=fg=green,bold
    ZSH_HIGHLIGHT_STYLES[precommand]=fg=green,underline
    ZSH_HIGHLIGHT_STYLES[commandseparator]=none
    ZSH_HIGHLIGHT_STYLES[hashed-command]=fg=green,bold
    ZSH_HIGHLIGHT_STYLES[path]=fg=blue,underline
    ZSH_HIGHLIGHT_STYLES[path_pathseparator]=
    ZSH_HIGHLIGHT_STYLES[path_prefix_pathseparator]=
    ZSH_HIGHLIGHT_STYLES[globbing]=fg=blue,bold
    ZSH_HIGHLIGHT_STYLES[history-expansion]=fg=blue,bold
    ZSH_HIGHLIGHT_STYLES[single-hyphen-option]=fg=cyan
    ZSH_HIGHLIGHT_STYLES[double-hyphen-option]=fg=cyan
    ZSH_HIGHLIGHT_STYLES[back-quoted-argument]=fg=yellow
    ZSH_HIGHLIGHT_STYLES[single-quoted-argument]=fg=yellow
    ZSH_HIGHLIGHT_STYLES[double-quoted-argument]=fg=yellow
    ZSH_HIGHLIGHT_STYLES[dollar-quoted-argument]=fg=yellow
    ZSH_HIGHLIGHT_STYLES[dollar-double-quoted-argument]=fg=cyan
    ZSH_HIGHLIGHT_STYLES[back-double-quoted-argument]=fg=cyan
    ZSH_HIGHLIGHT_STYLES[back-dollar-quoted-argument]=fg=cyan
    ZSH_HIGHLIGHT_STYLES[assign]=none
    ZSH_HIGHLIGHT_STYLES[redirection]=fg=yellow,bold
    ZSH_HIGHLIGHT_STYLES[comment]=fg=black,bold
    ZSH_HIGHLIGHT_STYLES[arg0]=fg=green,bold
    
    # パターンハイライト
    ZSH_HIGHLIGHT_PATTERNS+=('rm -rf *' 'fg=white,bold,bg=red')
    ZSH_HIGHLIGHT_PATTERNS+=('sudo *' 'fg=white,bold,bg=red')
    
    source "{{ .homebrew_prefix }}/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
fi

# zsh-completions（追加補完）
if [[ -d "{{ .homebrew_prefix }}/share/zsh-completions" ]]; then
    fpath=("{{ .homebrew_prefix }}/share/zsh-completions" $fpath)
fi

# fzf（pecoの代替）
if command -v fzf >/dev/null 2>&1; then
    # fzfの設定
    export FZF_DEFAULT_OPTS="--height 40% --layout=reverse --border --margin=1 --padding=1"
    
    # ripgrepがある場合はそれを使用
    if command -v rg >/dev/null 2>&1; then
        export FZF_DEFAULT_COMMAND='rg --files --hidden --follow --glob "!.git/*"'
        export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
    fi
    
    # fzfのキーバインド
    [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
    
    # Homebrewでインストールした場合
    if [[ -f "{{ .homebrew_prefix }}/opt/fzf/shell/key-bindings.zsh" ]]; then
        source "{{ .homebrew_prefix }}/opt/fzf/shell/key-bindings.zsh"
        source "{{ .homebrew_prefix }}/opt/fzf/shell/completion.zsh"
    fi
fi

# zoxide（cd強化）
if command -v zoxide >/dev/null 2>&1; then
    eval "$(zoxide init zsh)"
fi

# Starshipプロンプト（対話的シェルでのみ）
if command -v starship >/dev/null 2>&1 && [[ $- == *i* ]] && [[ "$TERM" != "dumb" ]]; then
    eval "$(starship init zsh)"
else
    # Starshipが無い場合や非対話的環境でのシンプルなプロンプト
    autoload -U colors && colors
    PROMPT="%{$fg[green]%}%n@%m%{$reset_color%} %{$fg[blue]%}%~%{$reset_color%} %# "
fi

# zsh設定
setopt AUTO_CD              # ディレクトリ名だけでcd
setopt AUTO_PUSHD           # cdでpushdする
setopt PUSHD_IGNORE_DUPS    # 重複するディレクトリはpushdしない
setopt EXTENDED_GLOB        # 拡張globを有効
setopt HIST_IGNORE_ALL_DUPS # 重複するコマンドは履歴に保存しない
setopt HIST_IGNORE_SPACE    # スペースで始まるコマンドは履歴に保存しない
setopt HIST_REDUCE_BLANKS   # 履歴の余分な空白を削除
setopt SHARE_HISTORY        # 履歴を共有
setopt HIST_VERIFY          # 履歴展開時に確認
setopt HIST_EXPIRE_DUPS_FIRST # 履歴が満杯時に重複を先に削除
setopt HIST_FIND_NO_DUPS    # 履歴検索で重複を表示しない
setopt HIST_SAVE_NO_DUPS    # 履歴保存時に重複を削除
setopt INC_APPEND_HISTORY   # コマンド実行時に即座に履歴に追加
setopt CORRECT              # コマンドの自動修正
setopt CORRECT_ALL          # 引数も自動修正
setopt NO_BEEP              # ビープ音を無効
setopt INTERACTIVE_COMMENTS # インタラクティブモードでもコメントを有効

# 履歴設定
HISTFILE="$HOME/.zsh_history"
HISTSIZE=100000
SAVEHIST=100000

# キーバインド（行頭移動をCtrl+Aに割当）
bindkey -e                                 # Emacsキーマップをベースに
bindkey '^A' beginning-of-line             # 共通
bindkey -M viins '^A' beginning-of-line    # vi挿入モードでも有効
bindkey -M vicmd '^A' beginning-of-line    # viコマンドモードでも有効

# ===== モジュール読み込み =====
# zsh設定ディレクトリ
ZSH_CONFIG_DIR="$HOME/.config/zsh"

# 補完設定
[[ -f "$ZSH_CONFIG_DIR/completions.zsh" ]] && source "$ZSH_CONFIG_DIR/completions.zsh"

# エイリアス
[[ -f "$ZSH_CONFIG_DIR/aliases.zsh" ]] && source "$ZSH_CONFIG_DIR/aliases.zsh"

# Git関連
[[ -f "$ZSH_CONFIG_DIR/git.zsh" ]] && source "$ZSH_CONFIG_DIR/git.zsh"

# tmux関連
[[ -f "$ZSH_CONFIG_DIR/tmux.zsh" ]] && source "$ZSH_CONFIG_DIR/tmux.zsh"

# カスタム関数
[[ -f "$ZSH_CONFIG_DIR/functions.zsh" ]] && source "$ZSH_CONFIG_DIR/functions.zsh"

# tmux自動起動（セッション管理改良）
if command -v tmux >/dev/null 2>&1 && [ -z "$TMUX" ] && [ "$TERM_PROGRAM" != "vscode" ] && [[ $- == *i* ]] && [[ "$TERM" != "dumb" ]]; then
    # tmuxのセッション一覧を取得
    sessions=$(tmux list-sessions 2>/dev/null)
    
    if [ $? -eq 0 ]; then
        # 既存のセッションがある場合は選択
        if command -v fzf >/dev/null 2>&1; then
            session=$(echo "$sessions" | fzf --select-1 --exit-0 | cut -d: -f1)
            if [ -n "$session" ]; then
                tmux attach-session -t "$session"
            else
                tmux new-session
            fi
        else
            tmux attach-session
        fi
    else
        # セッションが無い場合は新規作成
        tmux new-session
    fi
fi

# iTerm2 Shell Integration（存在する場合のみ）
[ -f ~/.iterm2_shell_integration.zsh ] && source ~/.iterm2_shell_integration.zsh

# Google Cloud SDK（存在する場合のみ）
[ -f ~/google-cloud-sdk/path.zsh.inc ] && source ~/google-cloud-sdk/path.zsh.inc
[ -f ~/google-cloud-sdk/completion.zsh.inc ] && source ~/google-cloud-sdk/completion.zsh.inc

# zsh-history-substring-search（履歴検索）- 最後に読み込み
if [[ -f "{{ .homebrew_prefix }}/share/zsh-history-substring-search/zsh-history-substring-search.zsh" ]]; then
    source "{{ .homebrew_prefix }}/share/zsh-history-substring-search/zsh-history-substring-search.zsh"
    
    # 履歴検索設定
    HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND='bg=green,fg=white,bold'
    HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_NOT_FOUND='bg=red,fg=white,bold'
    HISTORY_SUBSTRING_SEARCH_GLOBBING_FLAGS='i'
    
    # 履歴検索キーバインド
    bindkey '^[[A' history-substring-search-up     # 上矢印
    bindkey '^[[B' history-substring-search-down   # 下矢印
    bindkey '^P' history-substring-search-up       # Ctrl+P
    bindkey '^N' history-substring-search-down     # Ctrl+N
fi

# ローカル設定ファイル（存在する場合のみ）
[ -f ~/.zshrc.local ] && source ~/.zshrc.local
